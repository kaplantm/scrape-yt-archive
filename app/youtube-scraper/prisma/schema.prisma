// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
//   output = "../node_modules/.prisma/client" // https://github.com/prisma/prisma/issues/2584#issuecomment-646414549
// }

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Video {
  id                   Int                   @id @default(autoincrement())
  youtubeVideoId       String                @unique
  uploadDate           String? // only sometimes displayed by youtube. i might not use this, but don't want to throw it away
  // RELATIONS
  Author               User                  @relation("author", fields: [authorId], references: [id])
  authorId             Int
  VideoScrapeInstances VideoScrapeInstance[]
  Links                Link[]

  @@index([authorId, youtubeVideoId])
}

model VideoScrapeInstance {
  id               Int         @id @default(autoincrement())
  title            String
  description      String?     @db.LongText
  duration         Int?
  age              String? // i might not use this, but don't want to throw it away
  comments         Int?
  ratings          Int?
  stars            Float?
  views            Int?
  featureType      String      @default("featured")
  featureLabel     String?     @default("featured")
  waybackTimestamp BigInt
  // RELATIONS
  Selector         User?       @relation("selector", fields: [selectorId], references: [id])
  selectorId       Int?
  FeatureDate      FeatureDate @relation(fields: [featureDateId], references: [id])
  featureDateId    Int
  Video            Video       @relation(fields: [videoId], references: [id])
  videoId          Int
  DisplayName      ChannelName @relation(fields: [displayNameId], references: [id])
  displayNameId    Int
  Link             Link        @relation(fields: [linkId], references: [id])
  linkId           Int
  Tags             Tag[]
  Categories       Category[]

  @@unique([videoId, waybackTimestamp])
  @@index([featureDateId, videoId, title])
}

model ChannelName {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  UserWithUsername     User?                 @relation("username")
  UsersWithDisplayName User[]
  VideoScrapeInstance  VideoScrapeInstance[]
}

model Link {
  id                  Int                   @id @default(autoincrement())
  url                 String                @unique
  videoId             Int?
  // RELATIONS
  User                User[]
  Video               Video?                @relation(fields: [videoId], references: [id])
  VideoScrapeInstance VideoScrapeInstance[]
}

model User {
  id               Int                   @id @default(autoincrement())
  // RELATIONS
  Username         ChannelName           @relation("username", fields: [usernameId], references: [id])
  usernameId       Int                   @unique
  DisplayName      ChannelName[]
  Links            Link[]
  Videos           Video[]               @relation("author")
  SelectedFeatures VideoScrapeInstance[] @relation("selector")
}

model FeatureDate {
  id                  Int                   @id @default(autoincrement())
  // RELATIONS
  epochDate           BigInt                @unique
  VideoScrapeInstance VideoScrapeInstance[]
}

model Tag {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  // RELATIONS
  VideoScrapeInstance VideoScrapeInstance[]
}

model Category {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  // RELATIONS
  VideoScrapeInstance VideoScrapeInstance[]
}
