// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id                  Int                   @id @default(autoincrement())
  title               String?
  description         String
  duration            Int?
  videoUrlId          String                @unique
  uploadDate          String? // only sometimes displayed by youtube. i might not use this, but don't want to throw it away
  Tags                Tag[]
  Categories          Category[]
  Author              User?                 @relation("author", fields: [authorId], references: [id])
  authorId            Int?
  VideoScrapeInstances VideoScrapeInstance[]

  @@index([authorId, title, videoUrlId])
}

model VideoScrapeInstance {
  id                Int         @id @default(autoincrement())
  age               String? // i might not use this, but don't want to throw it away
  comments          Int?
  ratings           Int?
  stars             Float?
  views             Int?
  display_name      String // TODO: now add this for name at time of the snapshot
  feature_type      String      @default("featured")
  Selector          User?       @relation("selector", fields: [selectorId], references: [id])
  selectorId        Int?
  FeatureDate       FeatureDate @relation(fields: [featureDateId], references: [id])
  featureDateId     Int
  Video             Video       @relation(fields: [videoId], references: [id])
  videoId           Int
  wayback_timestamp BigInt

  @@unique([videoId, wayback_timestamp])
  @@index([featureDateId, videoId])
}

// TODO: now migation to add multiple author links
model DisplayName {
  id    Int    @id @default(autoincrement())
  name  String @unique
  Users User[]
}

model Link {
  id   Int    @id @default(autoincrement())
  url  String @unique
  User User[]
}

model User {
  id                Int                   @id @default(autoincrement())
  username          String                @unique
  DisplayName      DisplayName[]
  link              Link                  @relation(fields: [linkId], references: [id])
  Videos            Video[]               @relation("author")
  SelectedFeatures VideoScrapeInstance[] @relation("selector")
  linkId            Int
}

model FeatureDate {
  id                  Int                   @id @default(autoincrement())
  epoch_date          BigInt                @unique
  VideoScrapeInstance VideoScrapeInstance[]
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  Videos Video[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  Videos Video[]
}
